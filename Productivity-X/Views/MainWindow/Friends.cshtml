@model Productivity_X.Models.UserCreateEvent;
@{
    ViewData["Title"] = "Friends";
    Layout = "~/Views/Shared/_MainPageLayout.cshtml";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title></title>
    <style>
        .title {
            color: white;
            font-size: 20px;
            font-weight: bold;
            /*margin-left: 20px;*/
        }

        .list {
            color: white;
            font-size: 18px;
        }
    </style>
    <link href="~/css/index.css" rel="stylesheet" />
</head>
<body>
    <div id="app" style="width: 100%;padding-left: 12%; padding-top: 5%;">
        <div style="color: gold ;font-size: 20px;font-weight: bold; text-align:center;">Friends</div>
        <el-row :gutter="20" type="flex" justify="center">
            <el-col :span="6">
                <div class="grid-content bg-purple">
                    <div class="title">Friends List</div>
                    <div id="friend">
                        <ul>
                            <li class="list" v-for='list in friendList' v-bind:key='list.id'>
                                {{list.friendname}}  <a v-on:click='DeleteFriend(list.friendid)'>Delete</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </el-col>
            <el-col :span="6">
                <div class="grid-content bg-purple">
                    <div class="title">Friends Requests</div>
                    <div id="request">
                        <ul>
                            <li class="list" v-for='list in requestList' v-bind:key='list.id'>
                                {{list.friendname}} <a v-on:click='verifyFriend(list.friendid)'>YES</a> <a v-on:click='DeleteRequest(list.friendid)'>Delete</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </el-col>
            <el-col :span="6">
                <div class="grid-content bg-purple">
                    <div class="title">Search</div>
                    <template>
                        <el-select v-model="user"
                                   filterable
                                   remote
                                   reserve-keyword
                                   placeholder="Search"
                                   :remote-method="remoteMethod"
                                   :loading="loading"
                                   @@change="addFriend($event)">
                            <el-option v-for="item in options"
                                       :key="item.userid"
                                       :label="item.username"
                                       :value="item">
                            </el-option>
                        </el-select>
                    </template>
                </div>
            </el-col>
        </el-row>
    </div>
</body>
</html>
<script src="~/js/vue.js"></script>
<script src="~/js/vuetify.js"></script>
<script src="~/js/axios.js"></script>
<script src="https://unpkg.com/vue/dist/vue.js"></script>
<!-- import JavaScript -->
<script src="https://unpkg.com/element-ui/lib/index.js"></script>
<script>

    new Vue({
        el: '#app',
        data: {
            requestList: [],
            friendList: [],
            userList: [],
            options: [],
            value: [],
            loading: false
        },
        mounted() {
            this.getData();
        },
        methods: {
            getData() {
                const that = this;
                axios.get('/MainWindow/GetSearchUser', {
                    params: { 'keyword': that.searchUser }
                })
                    .then(function (response) {
                        that.userList = response.data;
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
                axios.get('/MainWindow/GetFriendsRequest')
                    .then(function (response) {
                        that.requestList = response.data;
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
                axios.get('/MainWindow/GetFriends')
                    .then(function (response) {
                        that.friendList = response.data;
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            addFriend: function (e) {
                axios.get('/MainWindow/AddFriend', {
                    params: { 'friendId': e.userid }
                })
                    .then(function (response) {
                        console.log(response);
                        alert("send success");
                        setTimeout(function () {
                            window.location.reload();
                        }, 1000);
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            verifyFriend: function (friendId) {
                const that = this;
                axios.get('/MainWindow/VerifyFriend', {
                    params: { 'friendId': friendId }
                })
                    .then(function (response) {
                        console.log(response);
                        alert("send success");
                        setTimeout(function () {
                            window.location.reload();
                        }, 1000);
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            DeleteRequest: function (id) {
                const that = this;
                axios.get('/MainWindow/DeleteRequest', {
                    params: { 'friendId': id }
                })
                    .then(function (response) {
                        that.userList = response.data;
                        alert("Delete success");
                        setTimeout(function () {
                            window.location.reload();
                        }, 1000);
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            DeleteFriend: function (id) {
                const that = this;
                axios.get('/MainWindow/DeleteFriend', {
                    params: { 'friendId': id }
                })
                    .then(function (response) {
                        that.userList = response.data;
                        alert("Delete success");
                        setTimeout(function () {
                            window.location.reload();
                        }, 1000);

                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            remoteMethod(query) {
                if (query !== '') {
                    this.loading = true;
                    setTimeout(() => {
                        this.loading = false;
                        this.options = this.userList.filter(item => {
                            return (item.username.toLowerCase()
                                .indexOf(query.toLowerCase()) > -1 || item.email.toLowerCase()
                                    .indexOf(query.toLowerCase()) > -1);
                        });
                    }, 200);
                }
                else {
                    this.options = [];
                }
            }
        },
    })

</script>